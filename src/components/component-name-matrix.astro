---
import { componentOriginalNames, sources, sourcesCount } from '../sources'
import _ from 'lodash'

const getMatchName = (name) =>
  name
    .replace(/ /gi, '')
    .toLowerCase()
    .replace(/(\w+)(e|er)?(s|ing)$/, '$1')

const matchNameMap = new Map([])

const matchNames = componentOriginalNames.map((name) => {
  const matchName = getMatchName(name)
  matchNameMap.set(name, matchName)
  return matchName
})

const matchNameToCount = _.sortBy(_.toPairs(_.countBy(matchNames)), ([matchName]) => matchName)
---

<style>
  .table {
    display: flex;
    text-align: center;
    font-size: 0.8rem;
  }

  .cell {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    height: 2rem;
    line-height: 1.2;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    border-right: 1px solid rgba(0, 0, 0, 0.1);
  }

  .count {
    display: block;
    background: limegreen;
    height: 4px;
    float: left;
  }

  .col {
    flex: 1;
    width: 2rem;
  }

  .header {
    position: sticky;
    display: block;
    padding: 1rem 0 0.5rem 0;
    top: 0;
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    background: white;
    border-bottom: 1px solid rgba(0, 0, 0, 0.5);
  }

  .found {
    background: rgba(0, 255, 0, 0.1);
    color: rgb(0, 64, 0);
    text-decoration: 'none',
  }

  .not-found {
    background: rgba(255, 0, 0, 0.1);
    color: rgb(64, 0, 0);
    text-decoration: none;
  }

  .component-name {
    max-width: 55px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>

<div class="table">
  <div>
    <strong class="header">
      Match
    </strong>
    {_.map(matchNameToCount, ([matchName, count]) => {
    return (
    <div class="cell">
      {Math.round((count / sourcesCount) * 100)}%
      <div class="count" style={`width: ${Math.round((count / sourcesCount) * 100) + '%' }`} />
    </div>
    )
    })}
  </div>


  {_.map(sources, (source) => (
  <div class="col">
    <strong class="header">
      <a target="_blank" rel="noopener noreferrer" href={source.url}>
        {source.name}
      </a>
    </strong>
    {_.map(matchNameToCount, ([matchName]) => {
    const foundComponent = _.find(
    source.components,
    ({ name }) => getMatchName(name) === matchName
    )

    return foundComponent ? (
    <a class="cell found" title={foundComponent.name} target="_blank" rel="noopener noreferrer"
      href={foundComponent.url}>
      <span class="component-name">
        {foundComponent.name}
      </span>
    </a>
    ) : (
    <div class="cell not-found" />
    )
    })}
  </div>
  ))}
</div>